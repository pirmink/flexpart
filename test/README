Calculate a dispersion simulation with FLEXPART and make plots
==============================================================

Testing with script "test-fp"
-----------------------------

Test script to prepare input data and run Flexpart. It
- Retrieves GRIB file from the operational (or a personal) COSMO storage
- Generates the 'pathnames' and the 'AVAILABLE' files
- Adapts the FLEXPART control input files according to the arguments
- Writes a batch job file
- Submits the job on a queue

See usage and a short help with command

  ./test-fp --help

For all settings see settings section of the script.

After running test-fp, change to the newly created job directory
named 'job/<tag>'. The job tag <tag> is an automatically increased
number by default, but can be set manually with the option -j.  The
last used number is stored in $HOME/.flexpart_job, do not modify that
file unless you know what you are doing!

After the successful execution of the job, change to the job output
directory to plot the result.


Plotting with Python script pyflexplot
--------------------------------------

Make plots from FLEXPART NetCDF output (set IOUT=9 in COMMAND) using the Python
tool pyflexplot.

Initialize the environment for Python:
  source /oprusers/osm/.opr_setup_dir
  source ${OPR_SETUP_DIR}/.python_base

Standard set of plots are produced with one of the presets. Obtain available presets with:
  pyflexplot --preset=?

Set variables for the arguments and options of pyflexplot
  preset=<preset>  # appropriate preset from the list obtained above
  job=<job-name>   # job name for which the output should be plotted
  pushd job/$job/output
  infile=$(ls *.nc)
  basetime=$(cat plot_info)

Run pyflexplot in a parallel environment as a batch job with
  batchPP -T 10 --reservation redhat79 "pyflexplot \
    --num-procs=\$SLURM_CPUS_PER_TASK \
    --preset $preset --merge-pdfs \
    --setup infile $infile  \
    --setup base_time $basetime"

To run the command interacitvely, activate parallel environment with e.g.
  salloc -c 10

then run the above commands starting with the definition of the variables. Use
the same pyflexplot command as above but remove the backslash in front of
$SLURM_CPUS_PER_TASK. After the command finishes, exit the parallel environment
  exit

View results
  evince *.pdf
  eog *.png

Return to test directory
  popd



Plotting with IDL runtime script flexplot (obsolete)
----------------------------------------------------

Output produced with test-fp --iout=1 can be plotted with one of
the scripts

flexpart-cosmo
flexpart-ifs-europe
flexplot-ifs-global

Start the appropriate script from within the directory "output".


Debug with data from a COSMO Package run
----------------------------------------

Locate the temporary working directory and copy the directory to a more
persistent location like $SCRATCH.

Location of the operational runs of the operational user osm:

  /opr/osm/tmp/<date>_<version>/lm_flexpart_c_wd_<job-no>/01

Change to the copied directory. Adapt the "pathnames" file to the new
location. Continue with the third paragraph of the next section.


Interactive runs
----------------

For debugging or performance testing, it might be useful to run
FLEXPART interactively. You may run test-fp with the option -n to see
the commands needed to prepare a FLEXPART run, or use the option -s to
actually execute the preparational commands but stop just before
submission of the batch job running FLEXPART.

Look into the job file to see the commands needed. They depend on
whether the code is compiled as serial or as parallel code.

Load the necessary modules to run FLEXPART:

  source FLEXPART.env

Allocate parallel processes and run FLEXPART in the job directory
with:

  salloc -n 10 # allocate 10 parallel processes (COSMO version only)
  export OMP_NUM_THREADS=10 # OMP to create 10 threads (COSMO version only)
  ulimit -s unlimited # FLEXPART needs unlimited stacksize
  ./FLEXPART
  exit # free allocation
