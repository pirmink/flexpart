#!/bin/bash
#+==============================================================================
# Use pyflexplot to produce the standard plot set for the NAZ.
#
# Author:      Pirmin Kaufmann
#-==============================================================================

# Settings
# --------
preset=opr/ifs-hres/all_???
plot_info_file=plot_info
# Defaults
ncpus=5
# --------

# Function
# --------
function display_help {
    # Show script usage
    cat >&2 << EOF

Use pyflexplot to produce the standard plot set for the NAZ.
       
Usage: $tag [OPTION]...

Mandatory arguments to long options are mandatory for short options too.
  -c, --clean            delete existing plots before invoking pyflexplot
  -f, --force            invoke pyflexplot even if plots already exist
  -h, --help             display this help and exit
  -n, --dry-run          print commands without executing them
  -N, --ncpus=NCPUS      use NCPUS parallel threads for pyflexplot

EOF
} # function display_help

# Initialization
# --------------
tag=$(basename $0)

# Parse arguments
# ---------------
iarg=0
while (( $# > 0 )) ; do
    case "$1" in
	-c | --clean)
	    clean=yes
	    ;;
	-n | --dry-run)
	    dry_run=yes
	    ;;
	-N | --ncpus*)
	    # Mandatory option argument with or without =
	    if [[ "$1" == *=* ]] ; then
		ncpus="${1#*=}"
	    else
		(( $# > 1 )) && shift && ncpus="$1"
	    fi
	    ;;
	-f | --force)
	    force=yes
	    ;;
	-h | --help)
	    echo Usage: $tag JOBDIR
	    exit
	    ;;
	-*)
	    echo $tag: "Unknown option: $1"
	    exit 1
	    ;;
	*)
	    (( iarg++ ))
	    case $iarg in
		1)
		    jobdir="$1"
		    ;;
		*)  # Additional arguments
		    echo $tag: "Too many arguments: $1"
		    exit 1
		    ;;
	    esac
	    ;;
    esac
    shift
done

# Start Processing
# ----------------

# Option -n, --dry-run
if [[ -n $dry_run ]] ; then
    # Enable escape sequences in echo with option -e
    exe_cmd="echo -e \e[07;32m \e[0m  "
    echo $tag: "INFO: Option --dry-run set," \
	"printing commands without executing them."
    echo -n $tag: "Skipped commands are marked with: "
    $exe_cmd
fi

# Change to ouput directory
if [[ -n $jobdir ]] ; then
    jobout=$jobdir/output
    echo $tag: Producing jobs in: $jobout
    pushd $jobout > /dev/null
else
    jobout=.
fi
infiles=( $PWD/*.nc )

# Check if plots exist
if ls *{png,pdf} > /dev/null 2>&1 ; then
    echo -n $tag: "Plot files already exist"
    if [[ -n $clean ]] ; then
	echo ", deleting."
	rm -rf *{png,pdf}
    elif [[ -z $force ]] ; then
	echo " (use --force to overwrite)," \
	"printing pyflexplot command without executing it."
	exe_cmd="echo -e Already done, skipping:\n "
    else
	echo ", overwriting."
    fi
fi

# Load environment for pyflexplot
[[ -z $OPR_SETUP_DIR ]] && source /oprusers/osm/.opr_setup_dir
source $OPR_SETUP_DIR/.python_base

# Load plot_info if present
if [[ -f $plot_info_file ]] ; then
    basetime=$(cat $plot_info_file)
    echo $tag: "Retrieved base time from plot_info file: $basetime"
    base_time_opt="--setup base_time ${basetime}"
fi

# Create NAZ plots
for infile in ${infiles[*]} ; do
    echo $tag: "Plotting ${infile}"
    $exe_cmd pyflexplot --num-procs=$ncpus --preset=${preset} --merge-pdfs --setup infile ${infile} $base_time_opt
done

if [[ -n $jobdir ]] ; then
    popd > /dev/null
fi

# Report results
if [[ -z $exe_cmd || -n $dry_run ]] ; then
    echo $tag: "Plots produced:"
    ls $jobout/*png | head -n 3
    echo "... ($(ls $jobout/*png | wc -l) png-files)"
    ls $jobout/*pdf
fi

# End of script
exit
